=======================================================================
=======================================================================
正则表达式：普通字符和特殊字符组成的模式字符串，一个匹配规则
语法：
字符类:[...]，匹配[]中字符串的任意一个字符，"-" 匹配指定范围内的任意字符
[^...]:表示不包含[]中字符串的任何一个字符
. :匹配除了换行回车之外的任意字符，相当于[^\r\n],,(\r:回车，\n：换行)

\d:匹配任意一个数字字符，例/\d\d/可以匹配dsdf89dfd中的89

\D  :匹配任意一个非数字字符，相当于[^0-9]

\s  :匹配任意空白字符，如空格，制表符，换行符等，相当于[\t\n\x0B\f\r]

\S  :匹配任意非空白字符，相当于[^\t\n\x0B\f\r

\w  ：匹配任何英文字母，数字字符及下划线，相当于[a-zA-Z0-9]

量词：
? :匹配前一项0次或1次，例子：
/JS?/可以匹配JScript中的JS或者匹配JavaScript中的J


+ :匹配前一项1次或多次，至少出现一次。实例：
/JS+/可以匹配JS，也可以匹配JSSSKK或者JSSSSSS，也就是说可以匹配J后面出现的1个或多个S，至少要有一个


* :匹配前一项0次或多次,也就是任意次，例子：
/bo*/可以匹配bo，booo，b，boo，之类的字符串


{n} :匹配前一项恰好n次，n为非负数，例子：
/o{2}/可以匹配book中的两个o，也可以匹配boooook中的任意两个连续的o


{n,} :匹配前一项至少n次，实例：
/o{2,}/不匹配home中的o，因为至少要匹配两个o，所以可以匹配good的两个o和gooood中的所有o


{n,m} ：匹配前一项至少n次，但不能超过M次 ，m>=n,非负，实例：
/o{2,5}/可以匹配book中的两个o，也可以匹配boooooook中的5个连续的o
{n,m}使用时数字与逗号之间不能有空格


指定匹配位置：
^  :匹配字符串的行开头，^必须出现在指定字符串的最开头才起作用，例：
/^g/匹配good中的g但不匹配bag中的g


$ :匹配字符串的行结尾，$必须出现在指定字符串的最后面才起作用，例：
/g$/匹配bag中的g，但不匹配good中的g


\b :匹配单词的边界，例：
/e\b/ 匹配 I love seek中love的e，不匹配seek中的e


\B ：匹配单词的非边界，例：
/e\B/ 不匹配 I love seek中love的e，匹配seek中的e


使用选择匹配符 "|"：
例：/world|dream/可以匹配"one world one dream"中的world或dream，只能匹配一个


分组：用()将多个单独的字符或字符类组合成子表达式
用|,*,+,?等来处理他们，例如：
/j(ava)?Script/可以匹配JavaScript中的ava整体，也可以匹配JScript，(?表示匹配0次或1次)
/j(ava)+Script/可以匹配JavaScript中的ava整体，不可以匹配JScript，(+表示匹配1次或多次，至少一次)
其中这里ava为一个整体
/j[ava]?Script/[]表示匹配ava的任意一个字符
=====================================================================================================
正则表达式的使用和创建：
1，通过RegExp类的构建方法创建
	语法格式：
	new RegExp(pattern[,flags]) 
	pattern:必选参数，用于指定需要进行匹配的模拟字符串,//\d{3}可以传进去
	flags：可选参数，用于指定正则表达式的标志信息
		g:全局标志。替换时会进行全局替换，否则仅替换第一次搜索到的字符
		i:大小写标志，表示不区分大小写
		m:多行标志，如果不设置m标志，则^只能匹配整个字符串的开头，$只能匹配字符串的结尾，如果设置了m，则^能匹配多行字符串的开头，$能匹配多行字符串的结尾

		var objExp=new RegExp(\\d,g)  //全局匹配数字
2，通过正则表达式字面量创建RegExp对象

	正则表达式字面量有两条斜线/，中间加入模式匹配字符串组成，如果还要指定标志信息，则在最后的斜线/后面加上标志信息，如g，i
	例如：匹配0-9 的。var objExp=/\d/g;


3，使用test()方法进行模拟匹配
	test()方法用于对一个指定的字符串执行模式匹配，如果搜到匹配的字符，返回true，否则返回false


	var objExp=/\d/g;
	objExp.test(123456);
	返回true
	var objExp=/\d/g;
	objExp.test(sddjf);
	返回false

4，使用exec()方法进行模拟匹配
	返回值不是true和false,而是当没有匹配到时返回null,匹配到时返回数组,这个数组的第一个元素包含与正则表达式相匹配的字符串，其他元素包含的是匹配的各个分组,用（）括起来的子表达式
		语法格式：
		regExp.exec(str)